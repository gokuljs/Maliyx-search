name: Build and Push to ECR

on:
  push:
    branches:
      - main # Triggers on push to main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image using Docker Compose
        run: |
          docker compose -f docker-compose.yaml build
      - name: List Docker images (debug)
        run: docker images

      - name: Get image ID for tagging
        id: get-image-id
        run: |
          IMAGE_ID=$(docker images --format "{{.ID}}" mailyx-search-app:latest)
          if [ -z "$IMAGE_ID" ]; then
            echo "Could not find mailyx-search-app:latest, searching for any recently built images"
            IMAGE_ID=$(docker images --format "{{.ID}}" --filter "dangling=false" | head -n 1)
          fi
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT
          echo "Found image ID: $IMAGE_ID"

      - name: Tag Docker image for ECR
        run: |
          # Store and clean the registry and repository values
          ECR_REGISTRY=$(echo "${{ secrets.ECR_REGISTRY }}" | tr -d '\n\r')
          ECR_REPOSITORY=$(echo "${{ secrets.ECR_REPOSITORY }}" | tr -d '\n\r')

          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository: $ECR_REPOSITORY"

          # Make sure both variables are defined
          if [ -z "$ECR_REGISTRY" ] || [ -z "$ECR_REPOSITORY" ]; then
            echo "Error: ECR_REGISTRY or ECR_REPOSITORY secrets are not defined"
            exit 1
          fi

          # Use the image ID for tagging if mailyx-search-app:latest doesn't exist
          if docker images | grep -q "mailyx-search-app"; then
            docker tag mailyx-search-app:latest "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
          else
            echo "Using image ID for tagging: ${{ steps.get-image-id.outputs.IMAGE_ID }}"
            docker tag ${{ steps.get-image-id.outputs.IMAGE_ID }} "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
          fi

      - name: Push Docker image to ECR
        run: |
          ECR_REGISTRY=$(echo "${{ secrets.ECR_REGISTRY }}" | tr -d '\n\r')
          ECR_REPOSITORY=$(echo "${{ secrets.ECR_REPOSITORY }}" | tr -d '\n\r')
          docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
